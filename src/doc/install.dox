/*!

\page install Installation

\section install_unix Installation on Unix/Linux or MacOS


Installing PD on a Unix, BSD or MacOS system is done using an autoconf 
script. For Windows users see the end of this file.

\subsection REQUIREMENTS REQUIREMENTS

 - a C/C++ compiler, e.g. GNU C++ or Intel

 - Python 2.3 or newer. This should be present on most modern
   systems, or if not is obtainable free of charge from 
	 www.python.org.  Unfortunatley we do not support older versions
	 of pythons because these lack certain language features required 
	 for the exporting of C++ functions.

 - SWIG 1.3.28 or newer. It can be obtained free of charge 
   from www.swig.org
 
   Note that this is only a partial requirement.
   If you obtained PD from a release package (rather than taking the 
	 code latest snapshot from the SVN server) you can still compile
	 and install PD without SWIG. Full functionality will be available
	 but you will not be able to modify the C++ code. To compile PD
	 in the absence of SWIG use the option <tt> --without-swig </tt> when running
	-the configure script.

\subsection optional OPTIONAL REQUIREMENTS

 - Doxygen  
   Autogenerate a local copy of the code documentation. Alternatively it's
	 available at http://bch-icarus.bch.bris.ac.uk/doxygen
   
\subsection simple_inst SIMPLE INSTALLATION

 - cd into the main PD directory (where the "configure" file is located)
 - run

\verbatim
     ./configure
\endverbatim

 - run
     make
 - run (as root)
     make install
 - set the environment variable <tt> PD_PARAM_PATH </tt> to your PD param path
   (see below for details) 

\subsection options INSTALLATION OPTIONS

 - Installing in an alternative location. 
   By default the PD libraries will be installed in <tt> /usr/local/lib </tt>
	 and in <tt> /usr/lib/pythonXXX/site-packages/pd </tt>
	 If you wish to install PD in a different location (for example when
	 you dont have administrator rights to your machine) you may
	 supply the option <tt> --prefix=mypath </tt> to configure, where mypath
	 is an absolute path to an existing directory. For example calling 
	 configure like this:

\verbatim
	   ./configure --prefix=/home/eric/pd
\endverbatim

	 will result in libraries being installed in
	 <tt> /home/eric/pd/lib </tt> and in <tt> /home/eric/pd/lib/pythonXXX/site-packages/pd </tt>
	 
 - Installing without SWIG. If you do not have SWIG 1.3.28 or newer
   installed the configure script will detect this and complain.
	 As mentioned above, it *is* possible to compile and install PD
	 without SWIG. To do this run configure like this:

\verbatim
	   ./configure --without-swig
\endverbatim

	 Note that this is only possible if the interface files which SWIG
	 normally generated have been provided with the PD package. This 
	 is only the case with release bundles, but not when you download
	 the source code directly from SVN (since we do not version the
	 autogenerated interface files). The configure script will detect this
	 and warn you if you cannot use the <tt> --without-swig </tt> option. 
	 It is important to note that in this compilation mode you cannot change
	 the PD source code, since that would require updating the interface 
	 files using SWIG. If you wish to develop new code for PD you must
	 download and install SWIG (see http://www.swig.org). Its a simple installation and
	 is recommended.


\subsection pd_param_path_setting SETTING PD_PARAM_PATH

	It is recommended to set the environment variable PD_PARAM_PATH to point to
	your PD forcefield library path, pd/lib 
	The variable may also contain multiple paths separated by semicolons. When 
	loading forcefields or other library files PD will search in the local directory first
	and then in the extra directories in the order they appear in PD_PARAM_PATH.
	To set the variable if you are using bash, add the following line to your
	.bashrc  file in your home directory (where <tt> /home/eric/pd </tt> should be replaced 
	with the place your installed PD in:
\verbatim
	export PD_PARAM_PATH="/home/eric/pd/param"
\endverbatim
	if you use tcsh add this to your .tcshrc
\verbatim
	setenv PD_PARAM_PATH /home/eric/pd/param
\endverbatim


\subsection systems SYSTEMS:

   PD has been successfully compiled and installed on many systems/plattforms
	  
	 - Linux 32 Bit AMD & Intel 
	 - Linux 64 Bit AMD & Intel
	 - MacOS PowerPC 
	 - MacOS Intel
	 - Windows XP
	 - Windows Vista


\subsection troubleshooting TROUBLESHOOTING

   If all fails email mtyka@u.washington.edu and I will try and help you out :)
	 

\section install_windows Installation on Windows




Note: pd will most probably run on older versions of windows
provided python is available but the following instructions refer
to Windows XP.

\subsection prerequisites Prerequisites

\subsection python_2_4 Python 2.4

PD is primarily used through Python which is thus required to operate pd.
Download the latest version from <a href="http://www.python.org/">www.python.org</a>
and follow their installation instructions. In the following we will assume you chose the default installation path
 <tt>C:\\Python24\\ </tt> 
For general convenience make sure the python executable directory <tt>C:\\Python24\\ </tt> is
in your PATH environment variable. To set the PATH variable

<OL>
	<LI> got to Start->Control Panel->System
	<LI> find the "Advanced Tab"
	<LI> Choose the button "Environment variables"
	<LI> Find the variable "Path" under "System variables"
	<LI> Choose "Edit" and add <tt>  C:\\Python24\\  </tt>
	<LI> Press OK
</OL>

A reboot may be required after the Python installation.



\subsection swig_1_3_28 SWIG-1.3.28

<b>SWIG is <i>only</i> required if you wish to <i>recompile</i> PD! 
If you only wish to run simulations with PD you may skip this section. </b> <br>
If you do wish to develop or modify PD you must install swig.
Download the latest version from <a href="http://www.swig.org/">www.swig.org</a>
and follow their installation instructions.
To recompile PD on Windows you will also need Microsoft Visual Studio 2005 or newer.


\subsection download_pd Download PD

Download PD from <a href="http://compbio.bris.ac.uk/pd/index.aspx">http://compbio.bris.ac.uk/pd/index.aspx</a>.

\subsection pd_installation_windows PD installation

Firstly unzip the archive into your directory of choice.<br>

<UL><LI>
<h4> System wide installation - recommended for pure users </h4>

You can create a system wide installation (making PD available from any simulation directory) by
copying <tt>bin/pd.py</tt> and <tt>bin/_pd.dll</tt> into <tt>c:\\Python24\\Lib</tt>
(or the equivalent directory should you have chosen a different installation directory for Python during the Python Installation)
</UL>

 OR


<UL><LI>

<h4> Local installation  - recommended for developers </h4>
 For developers of PD the above system wide isntalltion may be impeeding since they will be
constantly modifying their <tt> _pd.dll </tt> file during development and or would want maintain various versions.
Thus we recommend instead of a system wide version, to simply copy their latest <tt> pd.py </tt> and <tt> _pd.dll </tt> into the current simulation directory
to make the library available to python.
</UL>

\subsection env_var_windows Environment Variables


PD for developers requires sepcific environment variables. These can be added automatically using the enclosed script 'setup_winxp_env.vbs'. <br>
Note that you must replace the paths in this file if you have changed your installation defaults.<br>

PD requires the following environment variables: <br>
<UL>
<LI> PATH          += "C:\Python25"
<LI> PATH          += "C:\Program Files\swigwin-1.3.31"
<LI> PYTHON_LIB     = "C:\Python25\libs\python25.lib"
<LI> PYTHON_INCLUDE = "C:\Python25\include"
<LI> PD_PARAM_PATH  = "C:\<i>yourPDinstallationpath</i>\param"
</UL>




\subsection test_win_install  Test the installation:



<UL>
	<LI> Open a commandline window (Start->Run..->{type <tt>cmd</tt>}->OK)
	<LI> Type "python" to launch an interactive python shell. The result should look like this:


\verbatim
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\Documents and Settings\mt0226>python
Python 2.4.2 (#67, Sep 28 2005, 12:41:11) [MSC v.1310 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> _
\endverbatim



	 Should you get an error message <tt>'python' is not recognized as an internal or external command</tt>
        your python path is not in the PATH environment variable - use the instructions above to add it.

    <LI>Now, inside the python shell, type <tt>import pd</tt>. If your installation was successful you should see an output like


\verbatim
>>> import pd
PD 0.4 (c) J.Rea & M.Tyka 2003-2006 svn: $Revision: 597 $
Compile Date and Time: Nov 10 2006 10:26:57
Execution Date and Time: Sat Nov 11 15:19:40 2006
System: Windows Hostname: pluto
Application working directory: C:\Documents and Settings\mt0226\
>>>
\endverbatim


	 If you get an error message like the following:

\verbatim
>>> import pd
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
ImportError: No module named pd
>>>
\endverbatim

	 Python cannot find the <tt>pd.py</tt> and <tt>_pd.dll</tt>. To make them available to
	Python you must either create a systemwide installtion as described above or copy the two files into the current working directory.

	Alternatively if you are using the local installation, i.e. having the .py and .dll files in your local folder, and you are using
	Pythin >2.5, then the .dll file HAS TO be renamed to .pyd to work, not our design choice, a new "feature" in python 2.5.

</UL>






*/
